import client  from '../apollo-client';
import { gql } from '@apollo/client';
import { USER_MUTATIONS } from '../graphql/mutations/user.mutations';
import { USER_QUERIES } from '../graphql/queries/user.queries';

class UserService {
  constructor() {
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5分钟缓存
  }

  // 获取用户列表
  async getAllUsers() {
    try {
      const response = await client.query({
        query: gql`${USER_QUERIES.GET_ALL_USERS}`,
        errorPolicy: 'all'
      });
      
      if (!response.data || !response.data.users) {
        throw new Error('获取用户列表失败');
      }

      return response.data.users;

    } catch (error) {
      console.error('获取用户列表错误:', error);
      
      if (error.networkError) {
        throw new Error(`网络连接失败: ${error.networkError.message}`);
      } else if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        const messages = error.graphQLErrors.map(e => e.message).join(', ');
        throw new Error(`数据获取失败: ${messages}`);
      } else {
        throw new Error(`获取用户列表失败: ${error.message}`);
      }
    }
  }

  // 获取单个用户
  async getUser(id) {
    try {
      const response = await client.query({
        query: gql`${USER_QUERIES.GET_USER_BY_ID}`,
        variables: { id },
        errorPolicy: 'all'
      });

      if (!response.data || !response.data.user) {
        throw new Error('用户不存在');
      }

      return response.data.user;

    } catch (error) {
      console.error('获取用户详情错误:', error);
      
      if (error.networkError) {
        throw new Error(`网络连接失败: ${error.networkError.message}`);
      } else if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        const messages = error.graphQLErrors.map(e => e.message).join(', ');
        throw new Error(`数据获取失败: ${messages}`);
      } else {
        throw new Error(`获取用户详情失败: ${error.message}`);
      }
    }
  }

  // 根据用户名获取用户
  async getUserByUsername(username) {
    try {
      const response = await client.query({
        query: gql`${USER_QUERIES.GET_USER_BY_USERNAME}`,
        variables: { username },
        errorPolicy: 'all'
      });

      return response.data?.userByUsername || null;

    } catch (error) {
      console.error('获取用户详情错误:', error);
      
      if (error.networkError) {
        throw new Error(`网络连接失败: ${error.networkError.message}`);
      } else if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        const messages = error.graphQLErrors.map(e => e.message).join(', ');
        throw new Error(`数据获取失败: ${messages}`);
      } else {
        throw new Error(`获取用户详情失败: ${error.message}`);
      }
    }
  }

  // 获取当前用户
  async getCurrentUser() {
    try {
      const response = await client.query({
        query: gql`${USER_QUERIES.GET_CURRENT_USER}`,
        errorPolicy: 'all'
      });

      return response.data?.user || null;

    } catch (error) {
      console.error('获取当前用户错误:', error);
      
      if (error.networkError) {
        throw new Error(`网络连接失败: ${error.networkError.message}`);
      } else if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        const messages = error.graphQLErrors.map(e => e.message).join(', ');
        throw new Error(`数据获取失败: ${messages}`);
      } else {
        throw new Error(`获取当前用户失败: ${error.message}`);
      }
    }
  }

  // 创建用户
  async createUser(userData) {
    try {
      console.log('=== CREATE USER START ===');
      console.log('UserData:', userData);

      if (!userData || typeof userData !== 'object') {
        throw new TypeError('userData必须是对象');
      }

      // 构建变量 - 使用标准字段名
      const variables = {
        username: userData.username,
        email: userData.email,
        realName: userData.realName,
        password: userData.password,
        phone: userData.phone,
        status: userData.status || 'ENABLED',
        role: userData.role
      };

      console.log('创建用户变量:', variables);

      const response = await client.mutate({
        mutation: gql`${USER_MUTATIONS.CREATE_USER}`,
        variables,
        errorPolicy: 'all'
      });

      console.log('创建用户响应:', response);

      if (!response || !response.data) {
        throw new Error('无效的响应格式');
      }

      if (response.errors && response.errors.length > 0) {
        const errorMessages = response.errors.map(error => error.message).join(', ');
        throw new Error(`GraphQL错误: ${errorMessages}`);
      }

      const result = response.data.createUser;
      if (!result) {
        throw new Error('创建用户失败');
      }

      console.log('创建用户成功:', result);
      return result;

    } catch (error) {
      console.error('创建用户错误:', error);
      
      if (error.networkError) {
        throw new Error(`网络连接失败: ${error.networkError.message}`);
      } else if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        const messages = error.graphQLErrors.map(e => e.message).join(', ');
        throw new Error(`数据验证失败: ${messages}`);
      } else {
        throw new Error(`创建用户失败: ${error.message}`);
      }
    }
  }

  // 更新用户
  async updateUser(id, userData) {
    try {
      console.log('=== UPDATE USER START ===');
      console.log('ID:', id);
      console.log('UserData:', userData);

      if (!id) {
        throw new TypeError('用户ID不能为空');
      }

      if (!userData || typeof userData !== 'object') {
        throw new TypeError('userData必须是对象');
      }

      // 构建变量 - 只包含非空字段
      const variables = { id };
      
      if (userData.username !== undefined) variables.username = userData.username;
      if (userData.realName !== undefined) variables.realName = userData.realName;
      if (userData.email !== undefined) variables.email = userData.email;
      if (userData.phone !== undefined) variables.phone = userData.phone;
      if (userData.password !== undefined) variables.password = userData.password;
      if (userData.role !== undefined) variables.role = userData.role;
      if (userData.status !== undefined) variables.status = userData.status;

      console.log('更新用户变量:', variables);

      const response = await client.mutate({
        mutation: gql`${USER_MUTATIONS.UPDATE_USER}`,
        variables,
        errorPolicy: 'all'
      });

      console.log('更新用户响应:', response);

      if (!response || !response.data) {
        throw new Error('无效的响应格式');
      }

      if (response.errors && response.errors.length > 0) {
        const errorMessages = response.errors.map(error => error.message).join(', ');
        throw new Error(`GraphQL错误: ${errorMessages}`);
      }

      const result = response.data.updateUser;
      if (!result) {
        throw new Error('更新用户失败');
      }

      console.log('更新用户成功:', result);
      return result;

    } catch (error) {
      console.error('更新用户错误:', error);
      
      if (error.networkError) {
        throw new Error(`网络连接失败: ${error.networkError.message}`);
      } else if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        const messages = error.graphQLErrors.map(e => e.message).join(', ');
        throw new Error(`数据验证失败: ${messages}`);
      } else {
        throw new Error(`更新用户失败: ${error.message}`);
      }
    }
  }
  
  // 删除用户
  async deleteUser(id) {
    try {
      const response = await client.mutate({
        mutation: gql`${USER_MUTATIONS.DELETE_USER}`,
        variables: { id }
      });
      return response.data?.deleteUser || false;
    } catch (error) {
      console.error('删除用户失败:', error);
      throw new Error(`删除用户失败: ${error.message}`);
    }
  }

  // 重置密码
  async resetPassword(id, newPassword) {
    try {
      const response = await client.mutate({
        mutation: gql`${USER_MUTATIONS.RESET_PASSWORD}`,
        variables: { id, newPassword }
      });
      return response.data?.resetPassword || null;
    } catch (error) {
      console.error('重置密码失败:', error);
      throw new Error(`重置密码失败: ${error.message}`);
    }
  }

  // 修改密码
  async changePassword(oldPassword, newPassword) {
    try {
      const response = await client.mutate({
        mutation: gql`${USER_MUTATIONS.CHANGE_PASSWORD}`,
        variables: { oldPassword, newPassword }
      });
      return response.data?.changePassword || null;
    } catch (error) {
      console.error('修改密码失败:', error);
      throw new Error(`修改密码失败: ${error.message}`);
    }
  }

  // 清除缓存
  clearCache() {
    this.cache.clear();
  }
}

export default  new UserService();